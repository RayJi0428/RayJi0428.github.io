{"meta":{"title":"RayJi Blog","subtitle":"","description":"","author":"RayJi","url":"https://rayji0428.github.io","root":"/"},"pages":[{"title":"c","date":"2019-11-18T17:46:59.000Z","updated":"2019-11-18T17:46:59.128Z","comments":true,"path":"c/index.html","permalink":"https://rayji0428.github.io/c/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-11-19T15:12:23.000Z","updated":"2019-11-19T15:12:23.815Z","comments":true,"path":"categories/index.html","permalink":"https://rayji0428.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2019-12-23T16:18:01.090Z","updated":"2019-12-23T16:18:01.090Z","comments":true,"path":"downloads/code/LeetCode-6-ZigZagConversion.js","permalink":"https://rayji0428.github.io/downloads/code/LeetCode-6-ZigZagConversion.js","excerpt":"","text":"/** * @param {string} s * @param {number} numRows * @return {string} */ var convert = function (s, numRows) { let gap = Math.max(numRows * 2 - 2, 1); let idxList = []; for (let ri = 0; ri < numRows; ++ri) { let idx = 0; let p1 = ri + gap * idx; let p2 = (gap - ri) + gap * idx; while (true) { if (!s.charAt(p1)) break; if (idxList.indexOf(p1) == -1) { idxList.push(p1); } if (!s.charAt(p2)) break; if (idxList.indexOf(p2) == -1) { idxList.push(p2); } idx++; p1 = ri + gap * idx; p2 = (gap - ri) + gap * idx; } p1 += gap; p2 += gap; } let result = \"\"; idxList.forEach((v) => { result += s.charAt(v); }); return result; }; //Testcase console.log(convert(\"PAYPALISHIRING\", 1) == \"PAYPALISHIRING\"); console.log(convert(\"PAYPALISHIRING\", 2) == \"PYAIHRNAPLSIIG\"); console.log(convert(\"PAYPALISHIRING\", 3) == \"PAHNAPLSIIGYIR\"); console.log(convert(\"PAYPALISHIRING\", 4) == \"PINALSIGYAHRPI\");"},{"title":"","date":"2019-12-23T16:17:52.420Z","updated":"2019-12-23T15:49:37.510Z","comments":true,"path":"downloads/code/LeetCode-7-ReverseInteger.js","permalink":"https://rayji0428.github.io/downloads/code/LeetCode-7-ReverseInteger.js","excerpt":"","text":"var reverse = function (x) { let negative = x < 0; let result = x < 0 ? \"-\" : \"+\"; x = Math.abs(x).toString(); for (let i = x.length - 1; i > -1; --i) { if (result.length == 0 && x[i] == 0) { continue; } if (x[i] == '-') { continue; } result += x[i]; } result = parseInt(result); if (result < -Math.pow(2, 31) || result >= Math.pow(2, 31)) return 0; else return result; };"},{"title":"","date":"2019-12-23T15:41:18.811Z","updated":"2019-12-23T15:41:18.811Z","comments":true,"path":"downloads/code/LeetCode-8-StringtoInteger.js","permalink":"https://rayji0428.github.io/downloads/code/LeetCode-8-StringtoInteger.js","excerpt":"","text":"/** * @param {string} str * @return {number} */ var myAtoi = function (str) { let numberStr = \"\"; let result = 0; for (let i = 0; i < str.length; ++i) { let char = str.charAt(i); if (numberStr.length == 0) { if (char == \" \") { //開頭遇到空白掠過 continue; } else if (/[\\d+-]/.test(char) == false) { //第一個位只能是數字或+- break; } } else { if (/\\d/.test(char) == false) { //其他位只能是數字，遇到其他一律中斷 break; } } numberStr += char; } result = parseInt(numberStr); //防++42的狀況 if (result) { result > 0 ? result = Math.min(result, Math.pow(2, 31) - 1) : result = Math.max(result, -Math.pow(2, 31)); } else { result = 0; } return result; }; //test code---- console.log(myAtoi(\"++42\")); console.log(myAtoi(\"42\")); console.log(myAtoi(\" -42\")); console.log(myAtoi(\"4193 with words\")); console.log(myAtoi(\"4193-\")); console.log(myAtoi(\"words and 987\")); console.log(myAtoi(\"-91283472332\")); console.log(myAtoi(\" +0 123\"));"}],"posts":[{"title":"python專案(爬蟲 + LINE)","slug":"python/python-ptt-dlsr/python-ptt-dlsr","date":"2020-05-01T05:50:59.000Z","updated":"2020-05-01T06:39:59.826Z","comments":true,"path":"2020/05/01/python/python-ptt-dlsr/python-ptt-dlsr/","link":"","permalink":"https://rayji0428.github.io/2020/05/01/python/python-ptt-dlsr/python-ptt-dlsr/","excerpt":"","text":"存取帳號密碼帳號密碼存在環境變數內，使用os模組存取帳號密碼，增加安全性 os官方說明文件1token = os.environ[\"KEY\"]#取得環境變數 爬蟲使用requests取得目標頁面 HTTP庫官方說明文件123import requestsreq_session = requests.session()req = requests.get(url),cookies=&#123;&#125;) 使用BeautifulSoup解析頁面內容 網頁解析官方說明文件123from bs4 import BeautifulSoupsoup = BeautifulSoup(req.text, 'html.parser')#解析網頁tag = soup.select('.r-ent a') #搜尋目標 發送LINE圖片先建立一個LINE群組後，進入到 LINE Notify頁面右上角登入後，選擇個人頁面、選擇發行權杖，完畢後會得到一組金鑰(發送LINE通知用)接著按照API文件方式送出request即可 帳號密碼特別注意帳號、密碼、金鑰不要公開在網上，可以存到電腦環境變數中，再透過os存取 os官方說明文件1token = os.environ[\"KEY\"]#取得環境變數 資料比對爬蟲只能爬當下網頁資料，所以利用codecs另外存一個本地文件檔比對是不是新的資料，舊的資料就不用再次發送了 讀寫檔案官方說明文件12import codecsfile = codecs.open(file_path, 'r', encoding='utf-8') 結語全部完成後，讓工作排程定時觸發程式，就會定時撈取需要的圖片並發送到LINE群組中!範例 https://github.com/RayJi0428/python-ptt-dlsr","categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://rayji0428.github.io/tags/python/"}]},{"title":"JsMpeg影片播放","slug":"nodejs/js-jsmpeg","date":"2020-05-01T05:48:01.000Z","updated":"2020-05-01T05:48:45.903Z","comments":true,"path":"2020/05/01/nodejs/js-jsmpeg/","link":"","permalink":"https://rayji0428.github.io/2020/05/01/nodejs/js-jsmpeg/","excerpt":"","text":"","categories":[],"tags":[{"name":"NodeJS","slug":"NodeJS","permalink":"https://rayji0428.github.io/tags/NodeJS/"}]},{"title":"Python 套件","slug":"python/python-plugin","date":"2020-04-11T12:00:00.000Z","updated":"2020-04-11T12:01:12.980Z","comments":true,"path":"2020/04/11/python/python-plugin/","link":"","permalink":"https://rayji0428.github.io/2020/04/11/python/python-plugin/","excerpt":"常用套件紀錄","text":"常用套件紀錄 安裝套件找到pip.exe並建立到環境變數Path中cmd輸入 1pip install &apos;module name&apos; 檔案控制osos官方說明文件1token = os.environ[\"KEY\"]#取得環境變數 pyperclip剪貼簿官方說明文件123import pyperclippyperclip copy('str') #複製到剪貼簿pyperclip paste() #從剪貼簿貼上 codecs讀寫檔案官方說明文件12import codecsfile = codecs.open(file_path, 'r', encoding='utf-8') 網頁相關requestsHTTP庫官方說明文件123import requestsreq_session = requests.session()req = requests.get(url),cookies=&#123;&#125;) BeautifulSoup網頁解析官方說明文件123from bs4 import BeautifulSoupsoup = BeautifulSoup(req.text, 'html.parser')#解析網頁tag = soup.select('.r-ent a') #搜尋目標 其他LINE NotifyLINE通知官方說明文件1234567891011def NotifyLineMessage(msg): # function docstring line_notify_url = \"https://notify-api.line.me/api/notify\" line_header = &#123; \"Authorization\": \"Bearer \" + token, \"Content-Type\": \"application/x-www-form-urlencoded\" &#125; payload = &#123;'message': msg&#125; req_line = requests.post( line_notify_url, headers=line_header, params=payload) return req_line.status_code","categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://rayji0428.github.io/tags/python/"}]},{"title":"python-instagram","slug":"python/python-instagram","date":"2020-04-05T02:51:31.000Z","updated":"2020-04-11T12:02:01.022Z","comments":true,"path":"2020/04/05/python/python-instagram/","link":"","permalink":"https://rayji0428.github.io/2020/04/05/python/python-instagram/","excerpt":"","text":"https://github.com/LevPasha/Instagram-API-python","categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://rayji0428.github.io/tags/python/"}]},{"title":"python-exe","slug":"python/python-exe","date":"2020-04-05T02:27:53.000Z","updated":"2020-04-11T12:01:56.855Z","comments":true,"path":"2020/04/05/python/python-exe/","link":"","permalink":"https://rayji0428.github.io/2020/04/05/python/python-exe/","excerpt":"","text":"pip install pyinstaller Windows打包exepyinstaller -F .\\hello.py 替換icon製作icon.icohttps://www.favicon.cc/ 打包指令添加icon設定pyinstaller -F test.py –icon=icon.ico 參考資料https://medium.com/pyladies-taiwan/python-%E5%B0%87python%E6%89%93%E5%8C%85%E6%88%90exe%E6%AA%94-32a4bacbe351","categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://rayji0428.github.io/tags/python/"}]},{"title":"Egret-數獨計算器","slug":"egret/egret-sudoku","date":"2020-03-22T13:38:27.000Z","updated":"2020-03-22T16:13:40.344Z","comments":true,"path":"2020/03/22/egret/egret-sudoku/","link":"","permalink":"https://rayji0428.github.io/2020/03/22/egret/egret-sudoku/","excerpt":"使用Egret練習數獨計算器","text":"使用Egret練習數獨計算器 原始碼https://github.com/RayJi0428/egret-sudoku 心路歷程做完之後不太想玩數獨了…to be continue","categories":[],"tags":[{"name":"Egret","slug":"Egret","permalink":"https://rayji0428.github.io/tags/Egret/"}]},{"title":"Egret-大路模擬器","slug":"egret/egret-big-road","date":"2020-02-21T04:26:09.000Z","updated":"2020-02-23T15:35:29.343Z","comments":true,"path":"2020/02/21/egret/egret-big-road/","link":"","permalink":"https://rayji0428.github.io/2020/02/21/egret/egret-big-road/","excerpt":"使用Egret練習大路模擬器","text":"使用Egret練習大路模擬器 原始碼https://github.com/RayJi0428/egret-big-road 使用說明在輸入框填入目標大路UI欄、列長度，點擊Play按鈕生成介面。後續點『單』、『雙』按鈕演示路單。 演示規則 不同色，換欄 同色，超過邊界或下方已有其他路子，轉向 轉向後，源頭到尾巴的路子都必須畫線(注意轉角處) 最右欄永遠保持空 特殊規則(與一般大路不同):最新歷史紀錄必須永遠在畫面內(一般大路有可能因為其他列過長，導致最新紀錄在畫面外…) 作法簡介 想用最直接易懂的方式寫出來，一開始先在場上佈滿所有顯示元件，然後將一維陣列的『結果』轉換為二維陣列『顯示資料』，可以清楚知道每一欄列內容為何。當超過顯示上限時，就把多餘的欄位資料直接剔除。等顯示資料都準備好後，再一次繪製到畫面上。 過程最卡的是畫線，線段的繪製要考量其他方位內容，才知道要畫『直線』、『橫線』或『轉角』。而且畫線會跟砍資料有關，如果Ｌ線源頭已經被砍，下面殘留的路子線段必須呈現『橫線』，暫時沒想到好方法，所以直接預設『橫線』，檢測後才變成其他線段樣式… 心路歷程沒找到完整演算法，F12查看別人的代碼也很混亂，所以自己用Egret練習了一次大路的演示方法，提供有緣人參考，也自己留個學習紀錄。","categories":[],"tags":[{"name":"Egret","slug":"Egret","permalink":"https://rayji0428.github.io/tags/Egret/"}]},{"title":"jenkins-0","slug":"jenkins/jenkins-0","date":"2020-01-27T08:42:10.000Z","updated":"2020-02-21T04:28:48.387Z","comments":true,"path":"2020/01/27/jenkins/jenkins-0/","link":"","permalink":"https://rayji0428.github.io/2020/01/27/jenkins/jenkins-0/","excerpt":"","text":"參考網站https://jenkins.io/zh/doc/pipeline/tour/getting-started/","categories":[],"tags":[{"name":"jenkins","slug":"jenkins","permalink":"https://rayji0428.github.io/tags/jenkins/"}]},{"title":"Android-HelloWorld","slug":"android/Android-0","date":"2020-01-27T07:45:22.000Z","updated":"2020-01-27T08:06:13.201Z","comments":true,"path":"2020/01/27/android/Android-0/","link":"","permalink":"https://rayji0428.github.io/2020/01/27/android/Android-0/","excerpt":"","text":"學習紀錄安裝Android Studiohttps://developer.android.com/studio 建立專案File&gt;New&gt;New Project&gt;Empty Activity建立專案後，發現語言多了Kotlin?不是JAVA嗎…看來又要學習新東西了https://kknews.cc/zh-tw/code/ppv69p2.html 執行專案實體機專案建立完成，如果有連接Android裝置 Run&gt;Run ‘app’就可以執行 虛擬機(AVD)在IDE中尋找AVD Manager，Create Virtual Device &gt; 選擇機型、系統 &gt; 建置完成後就可以在IDE中選擇建立好的虛擬機 參考網站https://developer.android.com/guide","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"https://rayji0428.github.io/tags/Android/"}]},{"title":"Python 字串","slug":"python/python-string","date":"2020-01-27T04:19:59.000Z","updated":"2020-04-11T11:09:57.368Z","comments":true,"path":"2020/01/27/python/python-string/","link":"","permalink":"https://rayji0428.github.io/2020/01/27/python/python-string/","excerpt":"python字串基礎用法","text":"python字串基礎用法 多行字串123'''多行字串''' 多行註解123\"\"\"多行註解\"\"\" substr12STR = 'hello world!'STR[0:5]#hello in, not in123STR = 'hello world!''hello' in STR #True'Hello' in STR #False 方法12345STR = 'hello world!'STR.upper() #'HELLO WORLD!'STR.lower() #'hello world!''#'.join(['0','1','2']) #'0#1#2''0#1#2'.split('#') #['0','1','2']","categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://rayji0428.github.io/tags/python/"}]},{"title":"Python 基礎","slug":"python/python-basic","date":"2020-01-21T12:55:17.000Z","updated":"2020-04-11T11:11:19.731Z","comments":true,"path":"2020/01/21/python/python-basic/","link":"","permalink":"https://rayji0428.github.io/2020/01/21/python/python-basic/","excerpt":"紀錄python基礎語法","text":"紀錄python基礎語法 宣告12345678#變數VALUE = 10 #10 / 10.0 / \"A\" / NoneBOOLEAN = True #True / FalseLIST = [1, 2, 3]DICT = &#123;'key':'value'&#125;#functiondef myFun(v): print(v) 運算子1234** #指標 (2 ** 3 = 8)% #餘數 (22 % 8 = 6)// #整除 (22 // 8 = 2)+-*/ #正常用法 比較運算子1234542 &lt; 100 #TrueTrue and False #FalseTrue or False #Truenot True #Falsenot not True #True 流程控制1234567891011121314151617181920212223#if-elseif-elseif a == 1: print(\"1\")elif a == 2: print(\"2\")else: print(\"3\")#whilewhile True: if a == 1: continue elif a == 2: break breakprint(\"end while\")#for loopfor i in range(5): #0 ~ 4for i in range(5,10): #5 ~ 9for i in range(5,10,2): #5, 7, 9for i in range(5,-1,-1):#5 ~ 0 函式1234print() #consoleinput() #等待輸入文字並按下Enterlen() #計算字元個數str(),int(),float() #型別轉換 import 模組1234random #隨機亂數math #數學sys #系統os #os #global 123456def spam(): global eggs eggs = 'spam'eggs = 'global'spam()print(eggs) #spam 陣列1234567891011121314LIST = ['a','b','c','d']LIST[0] #aLIST[-1] #cLIST[1:3] #['b','c']len(LIST) #4del LIST[0] #LIST = ['b','c','d']for i in LIST: print(i) #a,b,c,d'a' in LIST #True'a' not in LIST #FalseLIST.index('b') #1LIST.append('e') #LIST = ['a','b','c','d','e']LIST.insert(1,'x') #LIST = ['a','x','b','c','d']LIST.remove('a') #LIST = ['b','c','d'] 字典1234567DICT = &#123;'key':'value'&#125;for v in DICT.values(): print(v)#valuefor v in DICT.values(): print(v)#keyfor v in DICT.items(): print(v)#('key','value') try…catch12345import try: raise Exception('This is this error message.')except: print(traceback.format_exc())","categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://rayji0428.github.io/tags/python/"}]},{"title":"Quaternion","slug":"math/Quaternion","date":"2019-12-24T16:20:42.000Z","updated":"2019-12-24T16:23:10.895Z","comments":true,"path":"2019/12/25/math/Quaternion/","link":"","permalink":"https://rayji0428.github.io/2019/12/25/math/Quaternion/","excerpt":"","text":"https://www.npmjs.com/package/quaternion/v/1.1.0 更能正確計算角度，避免萬向鎖問題","categories":[],"tags":[{"name":"Math","slug":"Math","permalink":"https://rayji0428.github.io/tags/Math/"}]},{"title":"自動生成.d.ts","slug":"nodejs/GenerateDts","date":"2019-12-24T15:58:25.000Z","updated":"2019-12-24T16:21:57.118Z","comments":true,"path":"2019/12/24/nodejs/GenerateDts/","link":"","permalink":"https://rayji0428.github.io/2019/12/24/nodejs/GenerateDts/","excerpt":"https://www.npmjs.com/package/dts-gen","text":"https://www.npmjs.com/package/dts-gen 每次要生成.d.ts都很苦惱，今天找到一個dts-gen，看起來還滿多人用的感覺不錯，使用方法也簡單！ 123&gt; npm install -g dts-gen&gt; npm install -g xxx_module&gt; dts-gen -m xxx_module 首先安裝dts-gen看是global或local都行安裝完成後再安裝需要的 xxx_module在相同路徑直接下指令，dts-gen -m xxx_module就可以生成.d.ts了！ 備註:1.還沒仔細研究其他API用法，但.d.ts型別大都是any，可能還是需要手動調整成正確型別2.首次測試沒辦法正確引用.d.ts類別，移除最上方的export = xxx_module就可以了(待研究)","categories":[],"tags":[{"name":"NodeJS","slug":"NodeJS","permalink":"https://rayji0428.github.io/tags/NodeJS/"}]},{"title":"StringtoInteger","slug":"leetcode/LeetCode-8-StringtoInteger","date":"2019-12-23T15:58:00.000Z","updated":"2019-12-23T16:14:22.450Z","comments":true,"path":"2019/12/23/leetcode/LeetCode-8-StringtoInteger/","link":"","permalink":"https://rayji0428.github.io/2019/12/23/leetcode/LeetCode-8-StringtoInteger/","excerpt":"目標設計一個 myAtoi function 將輸入字串轉為int","text":"目標設計一個 myAtoi function 將輸入字串轉為int https://leetcode.com/problems/string-to-integer-atoi/ 想法基本上就照著規則寫，特別注意的是++42還有+0這種case 原碼12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849/** * @param &#123;string&#125; str * @return &#123;number&#125; */var myAtoi = function (str) &#123; let numberStr = \"\"; let result = 0; for (let i = 0; i &lt; str.length; ++i) &#123; let char = str.charAt(i); if (numberStr.length == 0) &#123; if (char == \" \") &#123; //開頭遇到空白掠過 continue; &#125; else if (/[\\d+-]/.test(char) == false) &#123; //第一個位只能是數字或+- break; &#125; &#125; else &#123; if (/\\d/.test(char) == false) &#123; //其他位只能是數字，遇到其他一律中斷 break; &#125; &#125; numberStr += char; &#125; result = parseInt(numberStr); //防++42的狀況 if (result) &#123; result &gt; 0 ? result = Math.min(result, Math.pow(2, 31) - 1) : result = Math.max(result, -Math.pow(2, 31)); &#125; else &#123; result = 0; &#125; return result;&#125;;//test code----console.log(myAtoi(\"++42\"));console.log(myAtoi(\"42\"));console.log(myAtoi(\" -42\"));console.log(myAtoi(\"4193 with words\"));console.log(myAtoi(\"4193-\"));console.log(myAtoi(\"words and 987\"));console.log(myAtoi(\"-91283472332\"));console.log(myAtoi(\" +0 123\")); 結果Runtime: 72 ms, faster than 88.16% of JavaScript online submissions for String to Integer (atoi).Memory Usage: 36.6 MB, less than 28.57% of JavaScript online submissions for String to Integer (atoi).","categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://rayji0428.github.io/tags/LeetCode/"}]},{"title":"ReverseInteger","slug":"leetcode/LeetCode-7-ReverseInteger","date":"2019-12-23T15:00:00.000Z","updated":"2019-12-23T16:15:45.284Z","comments":true,"path":"2019/12/23/leetcode/LeetCode-7-ReverseInteger/","link":"","permalink":"https://rayji0428.github.io/2019/12/23/leetcode/LeetCode-7-ReverseInteger/","excerpt":"目標設計一個 reverse function 將輸入int反轉","text":"目標設計一個 reverse function 將輸入int反轉 https://leetcode.com/problems/reverse-integer/ 想法1.先紀錄正負2.for從尾巴開始印出，首位為0略過3.補上int32範圍跑起來效能一般..需要再研究如何提升效率 原碼12345678910111213141516171819202122var reverse = function (x) &#123; let negative = x &lt; 0; let result = x &lt; 0 ? \"-\" : \"+\"; x = Math.abs(x).toString(); for (let i = x.length - 1; i &gt; -1; --i) &#123; if (result.length == 0 &amp;&amp; x[i] == 0) &#123; continue; &#125; if (x[i] == '-') &#123; continue; &#125; result += x[i]; &#125; result = parseInt(result); if (result &lt; -Math.pow(2, 31) || result &gt;= Math.pow(2, 31)) return 0; else return result;&#125;; 結果Runtime: 88 ms, faster than 19.04% of JavaScript online submissions for Reverse Integer.Memory Usage: 35.9 MB, less than 38.54% of JavaScript online submissions for Reverse Integer.","categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://rayji0428.github.io/tags/LeetCode/"}]},{"title":"ZigZag Conversion","slug":"leetcode/LeetCode-6-ZigZagConversion","date":"2019-12-15T11:10:07.000Z","updated":"2019-12-23T16:17:12.005Z","comments":true,"path":"2019/12/15/leetcode/LeetCode-6-ZigZagConversion/","link":"","permalink":"https://rayji0428.github.io/2019/12/15/leetcode/LeetCode-6-ZigZagConversion/","excerpt":"目標設計一個 convert function 將輸入字串以И(反N)形狀排列後，再以列向右依序取出最後回傳。","text":"目標設計一個 convert function 將輸入字串以И(反N)形狀排列後，再以列向右依序取出最後回傳。 https://leetcode.com/problems/zigzag-conversion/ 12345678910111213141516171819202122var convert = function (s, numRows) &#123; //s:輸入字串 //numRows:指定列數&#125;------------------------------------------Example 1:Input: s = \"PAYPALISHIRING\", numRows = 3Output: \"PAHNAPLSIIGYIR\"Explanation:P A H NA P L S I I GY I R------------------------------------------Example 2:Input: s = \"PAYPALISHIRING\", numRows = 4Output: \"PINALSIGYAHRPI\"Explanation:P I NA L S I GY A H RP I 想法研究了兩天整理出以下推導公式再依續以列尋找，但要特別排除首列、末列找到重複idx問題 1234567890 4 81 3 5 7 92 6 10gap = 3 * 2 - 2 = 4;r0 = 0+4*0(0), (4-0)+4*0(4), 0+4*1(4), (4-0)+4*1(8), 0+4*2(8)...r1 = 1+4*0(1), (4-1)+4*0(3), 1+4*1(5), (4-1)+4*1(7), 1+4*2(9)...r2 = 2+4*0(2), (4-2)+4*0(2), 2+4*1(6), (4-2)+4*1(6), 2+4*2(10), (4-2)+4*2(10)...ri = r + gap * idx, (gap - r) + gap * idx ... 跑起來效能一般，看了比較優秀的寫法是用類似方向的方式，走到首列或最末列才轉向，不過還沒徹底了解，先這樣吧 原碼[ZigZagConversion] []view raw12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455/** * @param {string} s * @param {number} numRows * @return {string} */var convert = function (s, numRows) { let gap = Math.max(numRows * 2 - 2, 1); let idxList = []; for (let ri = 0; ri &lt; numRows; ++ri) { let idx = 0; let p1 = ri + gap * idx; let p2 = (gap - ri) + gap * idx; while (true) { if (!s.charAt(p1)) break; if (idxList.indexOf(p1) == -1) { idxList.push(p1); } if (!s.charAt(p2)) break; if (idxList.indexOf(p2) == -1) { idxList.push(p2); } idx++; p1 = ri + gap * idx; p2 = (gap - ri) + gap * idx; } p1 += gap; p2 += gap; } let result = \"\"; idxList.forEach((v) =&gt; { result += s.charAt(v); }); return result;};//Testcaseconsole.log(convert(\"PAYPALISHIRING\", 1) == \"PAYPALISHIRING\");console.log(convert(\"PAYPALISHIRING\", 2) == \"PYAIHRNAPLSIIG\");console.log(convert(\"PAYPALISHIRING\", 3) == \"PAHNAPLSIIGYIR\");console.log(convert(\"PAYPALISHIRING\", 4) == \"PINALSIGYAHRPI\"); 結果Runtime: 100 ms, faster than 45.29% of JavaScript online submissions for ZigZag Conversion.Memory Usage: 41.2 MB, less than 61.11% of JavaScript online submissions for ZigZag Conversion.","categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://rayji0428.github.io/tags/LeetCode/"}]},{"title":"Egret-泰文","slug":"egret/egret-thai","date":"2019-12-12T17:23:16.000Z","updated":"2020-02-23T14:52:09.080Z","comments":true,"path":"2019/12/13/egret/egret-thai/","link":"","permalink":"https://rayji0428.github.io/2019/12/13/egret/egret-thai/","excerpt":"","text":"Egret泰文沒有特別處理，在iOS上會有長度誤判問題","categories":[],"tags":[{"name":"Egret","slug":"Egret","permalink":"https://rayji0428.github.io/tags/Egret/"}]},{"title":"HexoComment","slug":"HexoComment","date":"2019-12-12T17:01:18.000Z","updated":"2020-04-05T02:51:42.292Z","comments":true,"path":"2019/12/13/HexoComment/","link":"","permalink":"https://rayji0428.github.io/2019/12/13/HexoComment/","excerpt":"","text":"參考https://morris821028.github.io/2014/04/12/web/hexo-comment/ https://disqus.com/","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://rayji0428.github.io/tags/Hexo/"}]},{"title":"AutoLoginWindows","slug":"windows/AutoLoginWindows","date":"2019-12-12T17:01:08.000Z","updated":"2019-12-24T16:21:48.090Z","comments":true,"path":"2019/12/13/windows/AutoLoginWindows/","link":"","permalink":"https://rayji0428.github.io/2019/12/13/windows/AutoLoginWindows/","excerpt":"","text":"參考https://www.reneelab.net/win-10-auto-login.html netplwiz取消勾選【必須輸入使用者名稱和密碼，才能使用這台電腦】在彈出的【自動登入】對話框中輸入您想讓電腦開機時自動登入的用戶名及密碼","categories":[],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://rayji0428.github.io/tags/Windows/"}]},{"title":"Hexo HelloWorld!","slug":"Hexo安裝","date":"2019-11-19T14:51:24.000Z","updated":"2019-12-15T13:05:18.784Z","comments":true,"path":"2019/11/19/Hexo安裝/","link":"","permalink":"https://rayji0428.github.io/2019/11/19/Hexo%E5%AE%89%E8%A3%9D/","excerpt":"想創建一個blog，快使用hexo吧!","text":"想創建一個blog，快使用hexo吧! hexo優點1.搭配github免費架站2.可搭配git直接publish到github上3.不用處理瑣碎html代碼4.完全客製化你想要的blog，不再受限各種blog網站 安裝nodejshttps://nodejs.org/en/download/按照步驟安裝完成後，輸入命令確認安裝是否正確 1node -v 安裝githttps://git-scm.com/downloads按照步驟安裝完成後，輸入命令確認安裝是否正確git version 安裝hexo 1npm install hexo -g 建置專案 123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install 啟動server 1hexo server 設定git 12345deploy: type: git repo: https://github.com/MyAccount/MyAccount.github.io.git branch: master message: 生成新文章 12hexo new &quot;My Post&quot;hexo new draft &quot;My Draft&quot; 發布 12hexo generatehexo deploy 問題紀錄:vsCode使用powershell輸入指令”hexo server”發生問題，改用cmd輸入正常youtube如何設定大小 參考網站:https://yaoandy107.github.io/hexo-tutorial/https://hexo.io/zh-tw/docs/ Hexo教學影片: 英文教學影片 中文教學影片","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://rayji0428.github.io/tags/Hexo/"}]},{"title":"Test1","slug":"Test1","date":"2019-11-18T17:33:39.000Z","updated":"2019-12-05T15:26:48.831Z","comments":true,"path":"2019/11/19/Test1/","link":"","permalink":"https://rayji0428.github.io/2019/11/19/Test1/","excerpt":"","text":"some content asd","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-11-18T16:38:57.381Z","updated":"2019-12-15T13:04:00.327Z","comments":true,"path":"2019/11/19/hello-world/","link":"","permalink":"https://rayji0428.github.io/2019/11/19/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}